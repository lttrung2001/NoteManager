plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 32

    kapt {
        correctErrorTypes true
    }

    viewBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "com.pnam.note"
        minSdk 23
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.0'
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.1'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    testImplementation 'junit:junit:4.13.2'
    test()
    reactive()
    daggerHilt()
    retrofit()
    room()
    jwt()
    coroutines()
    socket()
    loadImage()
}

private void test() {
    dependencies.androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    dependencies.androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    dependencies.androidTestImplementation "io.mockk:mockk-android:1.12.4"
}

private void reactive() {
    dependencies.implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'
    dependencies.implementation 'io.reactivex.rxjava3:rxjava:3.0.0'
}
private void daggerHilt() {
    dependencies.implementation 'com.google.dagger:hilt-android:2.43.1'
    dependencies.kapt 'com.google.dagger:hilt-android-compiler:2.43.1'
    dependencies.kapt 'androidx.hilt:hilt-compiler:1.0.0'
    dependencies.implementation "androidx.activity:activity-ktx:1.5.0"
}

private void retrofit() {
    dependencies.implementation 'com.squareup.retrofit2:retrofit:2.7.2'
    dependencies.implementation 'com.squareup.retrofit2:converter-gson:2.7.2'
    dependencies.implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    dependencies.implementation 'com.google.code.gson:gson:2.9.0'
    dependencies.implementation 'com.github.akarnokd:rxjava3-retrofit-adapter:3.0.0'
}

private void room() {
    def roomVersion = "2.4.3"

    dependencies.implementation("androidx.room:room-runtime:$roomVersion")
    dependencies.annotationProcessor("androidx.room:room-compiler:$roomVersion")

    // To use Kotlin annotation processing tool (kapt)
    dependencies.kapt("androidx.room:room-compiler:$roomVersion")

    // optional - Kotlin Extensions and Coroutines support for Room
    dependencies.implementation("androidx.room:room-ktx:$roomVersion")

    // optional - RxJava3 support for Room
    dependencies.implementation("androidx.room:room-rxjava3:$roomVersion")
}

private void jwt() {
    dependencies.implementation 'com.auth0.android:jwtdecode:2.0.1'
}

private void coroutines() {
    dependencies.implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9")
}

private void socket() {
    dependencies.implementation ("io.socket:socket.io-client:2.0.0")
}

private void loadImage() {
    dependencies.implementation 'com.github.bumptech.glide:glide:4.9.0'
    dependencies.implementation("io.coil-kt:coil:2.2.0")
}